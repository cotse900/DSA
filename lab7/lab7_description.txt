Building a Binary Search Tree
In this assignment, you will be asked to build a binary search tree (BST) from a randomly generated permutation
of numbers from 1 to 20.

You will then calculate:

1- the height of each tree and create and provide a histogram of the height. 2- the imbalance of the two main
subtrees for each binary tree created and plot a histogram.

3- Lastly, you will implement AVL and show how it changes the BSTs on the most imbalanced trees created.

Generate a random permutation of the numbers 1-20 using the random.sample() function in Python.

Build a binary search tree (BST) from the permutation using the insert() method provided in the skeleton code.
To build the histogram, I suggest you generate at least 1000 random sequences and save the height and imbalance of each tree.

Calculate the height of each tree in the BST and create a histogram of the height using the height() method
provided in the skeleton code. You can use a Python library such as matplotlib to create the histogram.

Calculate the imbalance of the two main subtrees for each binary tree created using the imbalance() method
provided in the skeleton code. You should record the imbalance for each tree and plot a histogram of the imbalances
using a Python library such as matplotlib.

Implement AVL and show how it changes the BSTs on the most imbalanced trees created. You can use the rotate_left()
and rotate_right() methods provided in the skeleton code to implement AVL. You should show the BSTs before and
after the AVL transformations and record the number of transformations needed to balance the trees.

Your submission should include the following:

1- Completed python script

2- Two histograms

3- A report that describes your implementation and discusses the results.

4- two examples of trees with high height or significant imbalance created with

from random import sample
from typing import List

class Node:
    def __init__(self, data: int):
        self.data = data
        self.left = None
        self.right = None

class BinarySearchTree:
    def __init__(self):
        self.root = None

    def insert(self, data: int):
        if not self.root:
            self.root = Node(data)
        else:
            self._insert(data, self.root)

    def _insert(self, data: int, node: Node):
        if data < node.data:
            if node.left:
                self._insert(data, node.left)
            else:
                node.left = Node(data)
        else:
            if node.right:
                self._insert(data, node.right)
            else:
                node.right = Node(data)

    def height(self, node: Node) -> int:
        if not node:
            return 0
        return max(self.height(node.left), self.height(node.right)) + 1

    def imbalance(self, node: Node) -> int:
        # Develop the imbalance function
        pass

    def inorder(self, node: Node) -> List[int]:
        if not node:
            return []
        return self.inorder(node.left) + [node.data] + self.inorder(node.right)

def generate_permutation(n: int) -> List[int]:
    return sample(range(1, n + 1), n)

def build_bst(data: List[int]) -> BinarySearchTree:
    bst = BinarySearchTree()
    for d in data:
        bst.insert(d)
    return bst

def plot_histogram(data: List[int], title: str):
    # Code for creating a histogram of the data
    # Use matplotlib
    pass

# Generate a random permutation of the numbers 1-20
data = generate_permutation(20)

# Build a binary search tree from the permutation
bst = build_bst(data)

# Calculate the height of the tree and create a histogram of the height
heights = []
# Code for calculating the height of each node in the BST and adding it to the list
plot_histogram(heights, "BST Height Histogram")

# Calculate the imbalance of the two main subtrees for each binary tree created and plot a histogram
imbalances = []
# Code for calculating the imbalance of each node in the BST and adding it to the list
plot_histogram(imbalances, "BST Imbalance Histogram")

Skeleton for AVL
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def __init__(self):
        self.root = None

    def insert(self, data):
        self.root = self._insert(self.root, data)

    def _insert(self, node, data):
        if not node:
            return Node(data)
        elif data < node.data:
            node.left = self._insert(node.left, data)
        else:
            node.right = self._insert(node.right, data)
        node.height = 1 + max(self._height(node.left),
                              self._height(node.right))
        balance = self._get_balance(node)
        if balance > 1 and data < node.left.data:
            return self._rotate_right(node)
        if balance < -1 and data > node.right.data:
            return self._rotate_left(node)
        if balance > 1 and data > node.left.data:
            node.left = self._rotate_left(node.left)
            return self._rotate_right(node)
        if balance < -1 and data < node.right.data:
            node.right = self._rotate_right(node.right)
            return self._rotate_left(node)
        return node

    def _get_balance(self, node):
        if not node:
            return 0
        return self._height(node.left) - self._height(node.right)

    def _height(self, node):
        if not node:
            return 0
        return node.height

    def _rotate_right(self, node):
        # implement the code for rotate right
        return new_root

    def _rotate_left(self, node):
        # implement the code for rotate right
        return new_root